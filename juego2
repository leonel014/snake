<!DOCTYPE html>
<html>
<head>
    <title>Juego de Snake</title>
</head>
<body>
    <canvas id="gameCanvas" width="400" height="400"></canvas>
    <script>
        var canvas = document.getElementById('gameCanvas');
        var context = canvas.getContext('2d');

        // Tamaño de cada celda del juego
var cellSize = 10;

// Posición inicial de la serpiente
var snake = [{x: 5, y: 5}];

// Dirección inicial de la serpiente
var direction = 'right';

// Posición inicial de la manzana
var apple = {x: 15, y: 15};

// Función para dibujar el juego
function drawGame() {
    // Limpiar el canvas
    context.clearRect(0, 0, canvas.width, canvas.height);
    
    // Dibujar la serpiente
    for (var i = 0; i < snake.length; i++) {
        context.fillStyle = 'green';
        context.fillRect(snake[i].x * cellSize, snake[i].y * cellSize, cellSize, cellSize);
    }
    
    // Dibujar la manzana
    context.fillStyle = 'red';
    context.fillRect(apple.x * cellSize, apple.y * cellSize, cellSize, cellSize);
}

// Función para actualizar el juego
function updateGame() {
    // Mover la serpiente en la dirección actual
    var head = {x: snake[0].x, y: snake[0].y};
    if (direction == 'right') head.x++;
    else if (direction == 'left') head.x--;
    else if (direction == 'up') head.y--;
    else if (direction == 'down') head.y++;
    snake.unshift(head);
    
    // Verificar si la serpiente se comió la manzana
    if (snake[0].x == apple.x && snake[0].y == apple.y) {
        // Generar una nueva manzana en una posición aleatoria
        apple.x = Math.floor(Math.random() * canvas.width / cellSize);
        apple.y = Math.floor(Math.random() * canvas.height / cellSize);
    } else {
        // Si no se comió la manzana, quitar el último elemento de la serpiente
        snake.pop();
    }
    
    // Verificar si la serpiente chocó con una pared o consigo misma
    if (snake[0].x < 0 || snake[0].x >= canvas.width / cellSize || snake[0].y < 0 || snake[0].y >= canvas.height / cellSize) {
        // Reiniciar el juego
        snake = [{x: 5, y: 5}];
        direction = 'right';
        apple = {x: 15, y: 15};
    }
    
    for (var i = 1; i < snake.length; i++) {
        if (snake[0].x == snake[i].x && snake[0].y == snake[i].y) {
            // Reiniciar el juego
            snake = [{x: 5, y: 5}];
            direction = 'right';
            apple = {x: 15, y: 15};
            break;
        }
    }
}

// Función para manejar las teclas del teclado
document.onkeydown = function(event) {
    if (event.keyCode == 37 && direction != 'right') direction = 'left';
    else if (event.keyCode == 38 && direction != 'down') direction = 'up';
    else if (event.keyCode == 39 && direction != 'left') direction = 'right';
    else if (event.keyCode == 40 && direction != 'up') direction = 'down';
}

// Actualizar el juego cada 100 milisegundos
setInterval(updateGame, 100);

// Dibujar el juego cada vez que se actualiza el navegador
requestAnimationFrame(function draw() {
    drawGame();
    requestAnimationFrame(draw);
});
    </script>
</body>
</html>